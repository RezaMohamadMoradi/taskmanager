@page "/Register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc
@using taskmanager.Model
@using taskmanager.Services
@using Task = System.Threading.Tasks.Task
@inject UserServices UserServices;
@inject NavigationManager NavManager
<PageTitle>Register</PageTitle>


<section class="vh-100" style="background-color: #eee;">
    <div class="container h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-lg-12 col-xl-11">
                <div class="card text-black" style="border-radius: 25px;">
                    <div class="card-body p-md-5">
                        <div class="row justify-content-center">
                            <div class="col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1">

                                <p class="text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4">Sign up</p>

                                <EditForm Model="RegisterModel" FormName="Register" OnValidSubmit="onregister">

                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-user fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <InputText type="text" id="form3Example1c" class="form-control" @bind-Value="RegisterModel.Name" />

                                            <label class="form-label" for="form3Example1c">Your Name</label>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-envelope fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <InputText type="email" id="form3Example3c" class="form-control" @bind-Value="RegisterModel.Email" />
                                            <label class="form-label" for="form3Example3c">Your Email</label>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-lock fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <InputText type="password" id="form3Example4c" class="form-control" @bind-Value="RegisterModel.Password" />
                                            <label class="form-label" for="form3Example4c">Password</label>
                                        </div>
                                    </div>

                                    <div class="d-flex flex-row align-items-center mb-4">
                                        <i class="fas fa-key fa-lg me-3 fa-fw"></i>
                                        <div data-mdb-input-init class="form-outline flex-fill mb-0">
                                            <InputText type="password" id="form3Example4cd" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                                            <label class="form-label" for="form3Example4cd">Repeat your password</label>
                                        </div>
                                    </div>



                                    <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                                        <button type="submit" data-mdb-button-init data-mdb-ripple-init class="btn btn-primary btn-lg">Register</button>
                                    </div>
                                </EditForm>

                            </div>
                            <div class="col-md-10 col-lg-6 col-xl-7 d-flex align-items-center order-1 order-lg-2">

                                <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-registration/draw1.webp"
                                     class="img-fluid" alt="Sample image">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@code {
    [CascadingParameter] HttpContext httpContext { get; set; }
    public class Registermodel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }

    [SupplyParameterFromForm(FormName = "Register")]//مشخص میکنیم برای کدام فرم است این مدل

    public Registermodel RegisterModel { get; set; } = new();
    [HttpPost]
    async Task onregister()
    {
        if (RegisterModel != null)
        {
            var user = new User
                {
                    Name = RegisterModel.Name,
                    Email = RegisterModel.Email,
                    UserName = RegisterModel.Name,// UserName معمولاً باید مقدار یکتا مانند Email باشد


                };

            try
            {
                var result = await UserServices.AddUserAsync(user, RegisterModel.Password);
                if (result.Succeeded)
                {
                    await Task.Delay(100); // اطمینان از تکمیل عملیات
                    NavManager.NavigateTo("/Login");
                }
                else
                {
                    foreach (var error in result.Errors)
                    {
                        Console.WriteLine(error.Description);
                    }
                }
            }
            catch (NavigationException nex)
            {
                Console.WriteLine($"Navigation Error: {nex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"General Error: {ex.Message}");
            }

        }
    }



}