@page "/"
@using System
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using taskmanager.Model
@using taskmanager.Services
@using Task = System.Threading.Tasks.Task
@using System.Security.Claims
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Mvc
@using TaskStatus = taskmanager.Model.TaskStatus
@inject NavigationManager NavigationManager
@inject TaskServices TaskServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]


<PageTitle>Home</PageTitle>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container my-5">
        <h1 class="text-center mb-4">مدیریت وظایف</h1>

        <!-- Task Table -->
        @if (userTasks != null && userTasks.Any())
        {
            <table style="text-align:center" class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>عنوان</th>
                        <th>جزئیات</th>
                        <th>دسته بندی</th>
                        <th>وضعیت</th>
                        <th>تاریخ افزودن</th>
                        <th>تاریخ انجام</th>
                        <th>عملیات</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var task in userTasks)
                {
                    var removeTaskFormName = $"removeTask_{task.id}";
                    var changeTaskStatusFormName = $"changeTaskStatus_{task.id}";

                    <tr>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.Category</td>
                        <td>
                            <span class="badge @(task.Status == TaskStatus.Completed ? "bg-success" : task.Status == TaskStatus.InProgress ? "bg-warning" : "bg-danger")">
                                @task.Status
                            </span>
                        </td>
                        <td>@task.AddDate?.ToString("yyyy-MM-dd")</td>
                        <td>@task.DateCompletion?.ToString("yyyy-MM-dd")</td>
                        <td>
                            <!-- فرم حذف -->
                            <EditForm Model="@task" OnValidSubmit="() => HandleRemoveTask(task.id)" FormName="@removeTaskFormName">
                                <button type="submit" class="btn btn-danger" style="font-size:12px; font-family:'Iranian Sans'; border-radius:10px">
                                    حذف
                                </button>
                            </EditForm>

                            <!-- فرم تغییر وضعیت -->
                            <EditForm Model="@task" OnValidSubmit="() => HandleChangeTaskStatus(task.id)" FormName="@changeTaskStatusFormName">
                                <button type="submit" class="btn btn-success" style="font-size:12px; font-family:'Iranian Sans'; border-radius:10px">
                                    انجام شد
                                </button>
                            </EditForm>

                            <!-- دکمه ویرایش -->
                            <button class="btn-warning" style="border-radius:10px">
                                <a href="/Edittask/@task.id" style="color: black;">ویرایش</a>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>




            </table>
        }
        else
        {
            <p>هیچ وظیفه‌ای برای نمایش وجود ندارد.</p>
        }
        <!-- لینک به صفحه افزودن وظیفه جدید -->


        <NavLink class="text-end" href="addtask">
            <div class="text-end">
                <button class="btn btn-primary">افزودن وظیفه جدید</button>
            </div>
        </NavLink>


    </div>

    <!-- Add Task Modal -->
    
    <p><strong>نام کاربر:</strong> @user.Identity.Name</p>
    <p><strong>ایمیل:</strong> @user.FindFirst(ClaimTypes.Email)?.Value</p>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
@code {
    private ClaimsPrincipal user;
    private taskmanager.Model.Task newTask = new();
    private List<taskmanager.Model.Task> userTasks = new List<taskmanager.Model.Task>(); // تعریف متغیر


    public class AddTaskMcodel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Category is required")]
        public string Category { get; set; }

        [Required(ErrorMessage = "Add Date is required")]
        public DateTime? AddDate { get; set; }

        public DateTime? DateCompletion { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }

        // دریافت شناسه کاربر
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            // دریافت وظایف کاربر از سرویس
            userTasks = await TaskServices.GetAllTasksAsync(userId);
        }
    }

    
   
        @code {
            private async Task HandleRemoveTask(int taskId)
            {
                await TaskServices.RemoveTask(taskId);
                userTasks = await TaskServices.GetAllTasksAsync(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                StateHasChanged(); // اجبار بروزرسانی رابط کاربری
            }

            private async Task HandleChangeTaskStatus(int taskId)
            {
                await TaskServices.ChangeTaskStatus(taskId);
                userTasks = await TaskServices.GetAllTasksAsync(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
                StateHasChanged(); // اجبار بروزرسانی رابط کاربری
            }
        }

    

   

   
}

