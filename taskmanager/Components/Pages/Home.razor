@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using taskmanager.Model
@using taskmanager.Services
@using Task = System.Threading.Tasks.Task
@using System.Security.Claims
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Mvc
@using TaskStatus = taskmanager.Model.TaskStatus
@inject NavigationManager NavigationManager
@inject  TaskServices TaskServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]


<PageTitle>Home</PageTitle>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container my-5">
        <h1 class="text-center mb-4">مدیریت وظایف</h1>

        <!-- Task Table -->
        <table class="table table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>عنوان</th>
                    <th>جزئیات</th>
                    <th>دسته بندی</th>
                    <th>وضعیت</th>
                    <th>تاریخ افزودن</th>
                    <th>تاریخ انجام</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var task in userTasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.Category</td>
                    <td>
                        <span class="badge @(task.Status == TaskStatus.Completed ? "bg-success" : task.Status == TaskStatus.InProgress ? "bg-warning" : "bg-danger")">
                            @task.Status
                        </span>
                    </td>
                    <td>@task.AddDate?.ToString("yyyy-MM-dd")</td>
                    <td>@task.DateCompletion?.ToString("yyyy-MM-dd")</td>
                </tr>
            }
            </tbody>

        </table>

        <!-- Add Task Button -->
        <div class="text-end">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTaskModal">افزودن وظیفه جدید</button>
        </div>
    </div>

    <!-- Add Task Modal -->
    <div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTaskModalLabel">افزودن وظیفه جدید</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="TaskModel" FormName="Addtask" OnValidSubmit="OnSubmitTask">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-4">
                            <label class="form-label" for="Title">Title</label>
                            <InputText id="Title" class="form-control" @bind-Value="TaskModel.Title" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="Description">Description</label>
                            <InputTextArea id="Description" class="form-control" @bind-Value="TaskModel.Description" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="Category">Category</label>
                            <InputText id="Category" class="form-control" @bind-Value="TaskModel.Category" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="AddDate">Add Date</label>
                            <InputDate id="AddDate" class="form-control" @bind-Value="TaskModel.AddDate" />
                        </div>

                        <div class="mb-4">
                            <label class="form-label" for="DateCompletion">Completion Date (optional)</label>
                            <InputDate id="DateCompletion" class="form-control" @bind-Value="TaskModel.DateCompletion" />
                        </div>

                        <div class="d-flex justify-content-center mx-4 mb-3 mb-lg-4">
                            <button type="submit" class="btn btn-primary btn-lg">Add Task</button>
                        </div>
                        @* <input name="__RequestVerificationToken" type="hidden" 
                               value="@Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext).RequestToken" /> *@
                        </EditForm>

                </div>
            </div>
        </div>
    </div>

    <p><strong>نام کاربر:</strong> @user.Identity.Name</p>
    <p><strong>ایمیل:</strong> @user.FindFirst(ClaimTypes.Email)?.Value</p>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
@code {
    private ClaimsPrincipal user;
    private List<taskmanager.Model.Task> userTasks = new();
    private taskmanager.Model.Task newTask = new();
    public class AddTaskModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; }

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Category is required")]
        public string Category { get; set; }

        [Required(ErrorMessage = "Add Date is required")]
        public DateTime? AddDate { get; set; }

        public DateTime? DateCompletion { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Login");
        }
    }
    [SupplyParameterFromForm(FormName = "Addtask")]//مشخص میکنیم برای کدام فرم است این مدل
    public AddTaskModel TaskModel { get; set; } = new();
    [HttpPost]
    private async Task OnSubmitTask()
    {
        try
        {
            // افزودن وظیفه جدید به دیتابیس
            await TaskServices.AddTaskAsync(TaskModel);

            // هدایت به صفحه اصلی
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            // مدیریت خطا
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}

